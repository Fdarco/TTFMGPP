import pickle
import xml.etree.ElementTree as ET
from collections import defaultdict


def genConn(fileName: str) -> dict:
    conn = defaultdict(list)
    elementTree = ET.ElementTree(file=fileName)
    root = elementTree.getroot()
    for child in root:
        if child.tag == 'connection':
            fromEdge = child.attrib['from']
            toEdge = child.attrib['to']
            if (':' not in fromEdge) and (':' not in toEdge):
                conn[fromEdge].append(toEdge)
    return conn


def checkRoute(rou: str, conn: dict) -> bool:
    edges = rou.split(' ')
    for i in range(len(edges) - 1):
        fromEdge = edges[i]
        toEdge = edges[i+1]
        if toEdge not in conn[fromEdge]:
            return False
    return True


def writeRou(vid: str, departTime: float, edges: str) -> str:
    output = '''    <vehicle id="{}" depart="{}">
        <route edges="{}"/>
    </vehicle>'''.format(vid, departTime, edges)
    return output


if __name__ == '__main__':

    with open('PPRoutes.pickle', 'rb') as f:
        routesInfo = pickle.load(f)

    PPRoutes = []
    for elem in routesInfo:
        if elem:
            PPRoutes.append(elem)

    PPRoutes.sort(key=lambda x: x[0])

    validRoutes = []
    invalidCnt = 0
    conn = genConn('../SUMOFiles/lima.net.xml')
    for vid in range(len(PPRoutes)):
        dt = PPRoutes[vid][0]  
        rou = PPRoutes[vid][1]
        if not checkRoute(rou, conn):
            invalidCnt += 1
        else:
            validRoutes.append(PPRoutes[vid])
    print(invalidCnt)


    # the topology generated by `buildTopologyM.py` is a little different from 
    # that of SUMO. The below roads can't find a valid connections, so we should
    # remove them. But this will not make big impacts to the final results.
    # we finally generate 31855 vehicles in `TTFMGPP.rou.xml` which have the 
    # same start point, end point and departure time as those in `lima.rou.xml`. 
    # The number of vehicles in `lima.rou.xml` is 31861, so these roads cause few impacts.

    ErrorPath = set([2662, 5142, 9250, 10285, 11092, 11384])
    with open('../SUMOFiles/PPPlanner.rou.xml', 'w') as wf:
        print('''<routes>''', file=wf)
        for i in range(len(validRoutes)):
            if i not in ErrorPath:
                vid = str(i)
                departTime = float(validRoutes[i][0])
                rEdges = validRoutes[i][1]
                vRou = writeRou(vid, departTime, rEdges)
                print(vRou, file=wf)
        print('''</routes>''', file=wf)